version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: restaurant_analytics_db_prod
    environment:
      POSTGRES_DB: restaurant_analytics_production
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - restaurant_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: restaurant_analytics_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    volumes:
      - redis_data_prod:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - restaurant_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  api:
    build: .
    container_name: restaurant_analytics_api_prod
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/restaurant_analytics_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RAILS_SERVE_STATIC_FILES=true
      - RAILS_LOG_TO_STDOUT=true
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RAILS_MAX_THREADS=5
      - WEB_CONCURRENCY=2
      - SIDEKIQ_CONCURRENCY=10
      - SIDEKIQ_REDIS_POOL_SIZE=20
    ports:
      - "127.0.0.1:3000:3000"  # Only bind to localhost for security
    volumes:
      - ./logs:/app/log
      - ./tmp:/app/tmp
      - ./storage:/app/storage
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - restaurant_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    command: ["bundle", "exec", "rails", "server", "-b", "0.0.0.0", "-e", "production"]

  sidekiq:
    build: .
    container_name: restaurant_analytics_sidekiq_prod
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/restaurant_analytics_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RAILS_LOG_TO_STDOUT=true
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SIDEKIQ_CONCURRENCY=10
      - SIDEKIQ_REDIS_POOL_SIZE=20
    volumes:
      - ./logs:/app/log
      - ./tmp:/app/tmp
      - ./storage:/app/storage
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml", "-e", "production"]

  # Production monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: restaurant_analytics_prometheus
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - restaurant_network_prod
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: restaurant_analytics_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "127.0.0.1:3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - restaurant_network_prod
    restart: unless-stopped

  # Production backup service
  backup:
    build: .
    container_name: restaurant_analytics_backup
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/restaurant_analytics_production
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    volumes:
      - ./backups:/app/backups
      - ./logs:/app/log
    depends_on:
      db:
        condition: service_healthy
    networks:
      - restaurant_network_prod
    restart: "no"
    command: ["bundle", "exec", "rails", "runner", "BackupService.perform_backup"]

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/postgresql/data/production
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/redis/data/production
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  restaurant_network_prod:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: restaurant_prod_bridge
